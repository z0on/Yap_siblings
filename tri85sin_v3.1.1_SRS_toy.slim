// Sweepstakes reproductive success (SRS) version
// version 4:
// - instead of heritability there is added random error with constant SD ("esd")
// (environmental effect on top of genetics);
// - fitness has low limit ("fitcushion") to stabilize behavior when fitness is very low;
// - hermaphroditic selfing is prohibited
// version 5: standing genetic variation is created via exagerrated mutatiton process in initialy small population sizes, to reach equilibrium more rapidly
// version 5.2: outputs numbers of m2 mutations and genetic variation (SD of fbreeding value)
// version 5.3: popscale parameter
// version 5.4: corrected the formula for genetic variation
// version 6: non-WF model with overlapping generations and age-dependent mortality.
// v6 comigration: all offspring of the same cross migrate together

// auto model with command-line options:
// slim -d seed=1 -d popscale=1 -d mutRate=1e-3 -d envirSD=0 -d Plasticity=0.25 -d MutEffect=0.01 -d numQTLs=1000 
// version 6.1: no density-dependent fitness bump past generation 3500

initialize() {
setwd("/Users/mvm296/Dropbox/Documents/coral_triangle_SLiM/trianglePaper_finalSubmission/CoralTriangle_SLiM_model");
	if (exists("slimgui"))
		{
			defineConstant("seed", 1);
			defineConstant("SRS", 0.01);
			defineConstant("popscale", 1);
			defineConstant("mutRate", 1e-5);
			defineConstant("envirSD", 0.5);
			defineConstant("Plasticity", 1);
			defineConstant("MutEffect", 0.03);
			defineConstant("numQTLs", 100);
		}
	setSeed(seed);
	initializeSLiMModelType("nonWF");
	defineConstant("startTime",clock()); 

	defineConstant("migMatrix","toy3_migmatrix.txt"); 
	defineConstant("PSZ","toy3_popsize.txt");  
	defineConstant("Environment","toy3_environment.txt");  
	initializeSLiMOptions(preventIncidentalSelfing=T);
//	defineConstant("popscale",PopScale); // set to <1 for quicker runs, Mrate will be scaled proportionally  to keep the same theta
	defineConstant("Mrate",mutRate/popscale);
	defineConstant("N_offspring",1);
	initializeMutationRate(Mrate); 
// age-related mortality (high early mortality, then low until max age 20)
// change first two values to 0.25, 0.125 for "low juvenile mortality" scenario
        defineConstant("L", c(0.5,0.25,rep(0,18),1));

	
	defineConstant("esd",envirSD);		   // sd of environmental effect on fitness, on top of genetic
	defineConstant("pl",Plasticity);				// plasticity: SD of the fitness bell curve 
	defineConstant("mutEffect",MutEffect);	// SD of mutation effects at QTLs (mean=0)
	defineConstant("C", numQTLs);				// number of QTLs
	defineConstant("N", 1);					// number of unlinked neutral sites (for popgen)
	defineConstant("srs", SRS);					// chance of reproduction under SRS

	defineConstant("maxfit",dnorm(0.0,0.0,pl));	// height of N peak, for fitness scaling
	defineConstant("fitcushion",1e-4);	// lowest possible fitness

	// neutral mutations in non-coding regions
	initializeMutationType("m1", 0.5, "f", 0.0);					// neutral
	initializeMutationType("m2", 0.5, "n", 0, mutEffect);		// thermal QTL
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m2, 1.0);
	m2.convertToSubstitution =F;
	initializeGenomicElement(g2,0,C-1);
	initializeGenomicElement(g1,C,C+N-1);
	initializeRecombinationRate(0.5);
	m2.mutationStackPolicy = "s"; // new mutations add to previous ones at the same locus
}


// setting mutation rate to zero during warming
//5499 late () {	
//	sim.chromosome.setMutationRate(0);
//}

// reading the tab-delimited migration rates matrix with pop sizes on diagonal 
// (no header!)
// sources are rows, sinks are columns
1 early() { 
	migrations=readFile(migMatrix);
	defineConstant("npops",size(migrations));
	
	// reading pop sizes
	defineConstant("popsizes",readFile(PSZ));
	
	// make our subpopulations (1/10 of final size initially), set emigration rates
	for (p in seqLen(npops)){
//		cat (popsizes[p]);
		psize=10+asInteger(popscale*asInteger(popsizes[p])/25);
		sim.addSubpop(p, psize);
		inds=sim.subpopulations[p].individuals;
		inds.age = rdunif(psize, min=3, max=10);
		inds.tagF=rnorm(size(inds),0,esd);
		ms=asFloat(strsplit(migrations[p],sep="\t"));
		sim.subpopulations[p].setValue("popmig", ms);
		sim.subpopulations[p].setValue("popsize",psize);
		cat(asInteger(popsizes[p])+" ");
	}
   sim.chromosome.setMutationRate(Mrate*25);
}


// load environmental profiles: tab-delimited table with generations as columns, pops as rows. Header line must be present but what it contains is irrelevant.
1 early() { 
	env=readFile(Environment); 
	for (i in seqLen(npops)) {
		pop=sim.subpopulations[i];
		pop.setValue("env",asFloat(strsplit(env[i+1],sep="\t"))); 
	}
}

fitness(m2) { 
	// the QTLs themselves are neutral
		return 1.0;
}

// reproduction with dispersal of new individuals among subpops according to migration matrix
reproduction() {
	if(size(subpop.individuals)>1 & individual.age>2){
	if(sim.generation<2005) {
		if ((sim.generation>2000 & sim.generation<2005) ) {
			for (i in 1:N_offspring) { // redistribute offspring randomly
				dest = sample(sim.subpopulations, 1);
                                mate=subpop.sampleIndividuals(1,exclude=individual,minAge=3);
                                if(size(mate)>0) {
                                        dest.addCrossed(individual, mate);
                                }
			}
		}	else {
			dest = sample(sim.subpopulations, 1,weights=subpop.getValue("popmig"));	
			mate=subpop.sampleIndividuals(1,exclude=individual,minAge=3);
			if(size(mate)>0) {
				for (i in 1:N_offspring) { // offspring of the same cross migrate together
						dest.addCrossed(individual, mate);
				}
			}
		}
	} else {
		if(runif(1)<srs) {
			dest = sample(sim.subpopulations, 1,weights=subpop.getValue("popmig"));	
			mate=subpop.sampleIndividuals(1,exclude=individual,minAge=3);
			noff=rpois(1,round(N_offspring/srs));
//			print(noff);
			if(size(mate)>0) {
				for (i in 1:noff) { // offspring of the same cross migrate together
						dest.addCrossed(individual, mate);
				}
			}
		}
	}
	}
}

// storing individual-specific environmental noise values (so they don't change from year to year)
modifyChild() {
	child.tagF=rnorm(1,0,esd);
	return T;
}

// QTL fitness and density dependence
2: early() {
	catn("#"+sim.generation);
	deadpops=0;
	// life table based individual mortality
	for (subpop in sim.subpopulations) { 
		inds = subpop.individuals;
		if (size(inds)==0) {
			catn("empty subpop "+subpop.id);
			deadpops=deadpops+1;
			next;
		}
		adults=which(inds.age>2);
		subpop.setValue("adultCount",size(adults));
		if (size(adults)<1) { 
			deadpops=deadpops+1;
			catn("no adults in subpop "+subpop.id);
		}
		phenotypes = inds.sumOfMutationsOfType(m2)+ inds.tagF;
		subpop.setValue("phenotypes",phenotypes);
		phenoFitness=(fitcushion + dnorm(subpop.getValue("env")[sim.generation]- phenotypes, 0,pl)) / (maxfit + fitcushion);
//		catn(mean(phenoFitness));
		subpop.setValue("phenoFitness",phenoFitness);
		ages = inds.age;
		mortality = L[ages];
		survival = 1 - mortality;
		inds.fitnessScaling = survival*phenoFitness;
//		catn(inds.fitnessScaling[adults]);
		subpop.fitnessScaling = subpop.getValue("popsize")/ (subpop.individualCount * mean(inds.fitnessScaling));
		if (subpop.fitnessScaling>1 & sim.generation>2100) {
			subpop.fitnessScaling=1;
		}
	}
//	catn("deadpops: "+deadpops);
	if (deadpops==size(sim.subpopulations)) { sim.simulationFinished(); }
}

// increasing pop size / decreasing mutation rate (initial genetic equilibration)
1000 late() {
	for (p in seqLen(npops)){
		sim.subpopulations[p].setValue("popsize",asInteger(10+popscale*asInteger(popsizes[p])/10));
	}
   sim.chromosome.setMutationRate(Mrate*10);
}
2000 late() {
	for (p in seqLen(npops)){
		sim.subpopulations[p].setValue("popsize",asInteger(10+popscale*asInteger(popsizes[p])));
	}
   sim.chromosome.setMutationRate(Mrate);
}

// output, for adults in each pop: 
// - mean fitness
// - mean phenotype
// - environmental setting in the current generation
// - number of segregating m2 mutations
// - genetic varation (sd of breeding value)
// - mean age 
// - number of adults
// - fraction of adults that died that year
4500: late() {
	bvalues=sim.subpopulations.individuals.sumOfMutationsOfType(m2);
	if (size(bvalues)==0) { 
		catn("no bvalues: "+size(bvalues));
		sim.simulationFinished(); 
	}
	cat("#TotalG\t"+sim.generation+"\t"+size(sim.mutationsOfType(m2))+"\t"+sd(bvalues)+"\n");
	for (p in seqLen(npops)){
		pop=sim.subpopulations[p];
		mf=sim.mutationFrequencies(pop,sim.mutationsOfType(m2));
		nmuts=sum(mf>0 & mf<1);
		adults=which(pop.individuals.age>2);
//		catn(pop.cachedFitness(adults[1:5]));
		if (size(adults)>1){
			cat(sim.generation +"\t" + p +"\t"+mean(pop.getValue("phenoFitness")[adults])+ "\t" + mean(pop.getValue("phenotypes")[adults])+"\t"+ pop.getValue("env")[sim.generation] + "\t"+nmuts+"\t"+sd(pop.individuals[adults].sumOfMutationsOfType(m2))+"\t"+mean(pop.individuals[adults].age)+"\t"+size(adults)+"\t"+(pop.getValue("adultCount") - size(adults))/pop.getValue("adultCount")+"\n");
		} 
		else { 
			cat(sim.generation +"\t" + p +"\tNA\tNA\t"+ pop.getValue("env")[sim.generation] + "\tNA\tNA\tNA\t"+size(adults)+"\t"+(pop.getValue("adultCount") - size(adults))/pop.getValue("adultCount")+"\n");
		}
	}
}


// output all mutations post-burnin and after 50 and 100 generations of warming
5499 late() { 
		sim.outputMutations(sim.mutationsOfType(m2));
}
// output all mutations post-burnin
5550 late() { 
		sim.outputMutations(sim.mutationsOfType(m2));
}
// output all mutations post-burnin
5600 late() { 
		sim.outputMutations(sim.mutationsOfType(m2));
}
// output all mutations post-burnin
5650 late() { 
		sim.outputMutations(sim.mutationsOfType(m2));
}


5994 late() {}

